@Input("vert_source", 0)
@Input("vert_00", 1)
@Input("vert_01", 2)
@Input("vert_10", 3)
@Input("vert_11", 4)
@Input("vert_color", 5)
@Output("color", 0)
@Output("normal", 1)
shader_name :: "Texture Batch (3D)";

@Vertex
vert : *char = """

in vec4 vert_source;
in vec3 vert_00;
in vec3 vert_01;
in vec3 vert_10;
in vec3 vert_11;
in vec4 vert_color;
out vec2 frag_uv;
out vec4 frag_source;
out vec2 frag_scale;
out vec4 frag_tint;
out vec3 frag_normal;
uniform mat4 view_projection;

void main()
{
    vec4 source = vert_source;
    vec3 vertices[] = vec3[](vert_00, vert_01, vert_10, vert_11);
    vec4 tint = vert_color;
    vec4 world_space = vec4(vertices[gl_VertexID], 1);
    vec4 clip_space = view_projection * world_space;
    
    vec2 uvs[] = vec2[](vec2(0, 0), vec2(0, 1), vec2(1, 0), vec2(1, 1));
    frag_uv = uvs[gl_VertexID];
    frag_source = source;
    frag_scale = vec2(4, 4);
    frag_tint = tint;
    
    gl_Position = clip_space;
    
    frag_normal = normalize(cross(vert_01 - vert_00, vert_10 - vert_00));
    if(frag_normal.y < 0)
    {
        frag_normal = -frag_normal;
    }
}
""";

@Fragment
frag : *char = """
in vec2 frag_uv;
in vec4 frag_source;
in vec2 frag_scale;
in vec4 frag_tint;
in vec3 frag_normal;
out vec4 color;
out vec4 normal;
uniform sampler2D tex;
uniform vec2 tex_resolution;
void main()
{
    vec2 uv_offset = frag_source.xy;
    vec2 uv_range = frag_source.zw;
    vec4 tint = frag_tint;
    vec2 scale = frag_scale;
    
    vec2 pixel = (uv_offset + (frag_uv * uv_range));
    vec2 sample_uv = floor(pixel) + vec2(0.5, 0.5);
    
    sample_uv.x += 1.0 - clamp((1.0 - fract(pixel.x)) * abs(scale.x), 0.0, 1.0);
    sample_uv.y += 1.0 - clamp((1.0 - fract(pixel.y)) * abs(scale.y), 0.0, 1.0);
    
    color = texture(tex, sample_uv / tex_resolution);
    if(color.a > 0)
    {
        color.xyz /= color.a;
        color *= tint;
        normal = vec4(frag_normal, 1);
    }
    else
    {
        discard;
    }
    
}
""";