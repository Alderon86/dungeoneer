@Input("vert_source", 0)
@Input("vert_position_1", 1)
@Input("vert_position_2", 2)
@Input("vert_position_3", 3)
@Input("vert_position_4", 4)
@Input("vert_color", 5)
@Input("vert_boldness", 6)
@Input("vert_softness", 7)
@Output("color", 0)
shader_name :: "Text";

@Vertex
vert : *char = """

in vec4 vert_source;
in vec3 vert_position_1;
in vec3 vert_position_2;
in vec3 vert_position_3;
in vec3 vert_position_4;
in vec4 vert_color;
in float vert_boldness;
in float vert_softness;

out vec2 frag_uv;
out vec4 frag_color;
out float frag_boldness;
out float frag_softness;

uniform mat4 view_projection;

void main()
{
    vec4 source = vert_source;
    vec4 vertices[] = vec4[](vec4(vert_position_1, 1),
                             vec4(vert_position_2, 1),
                             vec4(vert_position_3, 1),
                             vec4(vert_position_4, 1));
    vec4 color = vert_color;
    float boldness = vert_boldness;
    float softness = vert_softness;
    
    vec4 world_space = vertices[gl_VertexID];
    vec4 clip_space = view_projection * world_space;
    gl_Position = clip_space;
    
    vec2 uvs[] = vec2[](vec2(0, 0),
                        vec2(0, 1),
                        vec2(1, 0),
                        vec2(1, 1));
    
    frag_uv = vert_source.xy + uvs[gl_VertexID]*vert_source.zw;
    frag_color = color;
    frag_boldness = boldness;
    frag_softness = softness;
}
""";

@Fragment
frag : *char = """

in vec2 frag_uv;
in vec4 frag_color;
in float frag_boldness;
in float frag_softness;

out vec4 color;

uniform sampler2D tex;
uniform vec2 tex_resolution;

void main()
{
    vec2 uv = frag_uv;
    vec4 text_color = frag_color;
    float boldness = frag_boldness;
    float softness = frag_softness;
    
    vec2 resolution = tex_resolution;
    vec2 pixel = uv;
    vec2 sample_uv = floor(pixel) + vec2(0.5, 0.5);
    sample_uv.x += 1.0 - clamp((1.0 - fract(pixel.x)), 0.0, 1.0);
    sample_uv.y += 1.0 - clamp((1.0 - fract(pixel.y)), 0.0, 1.0);
    float distance = texture(tex, sample_uv / resolution).a;
    float smooth_step = smoothstep(1.0 - boldness, (1.0 - boldness) + softness, distance);
    color = text_color * smooth_step;
    color.xyz /= color.a;
    if(color.a < 0.02)
    {
        discard;
    }
}

""";
